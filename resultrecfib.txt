
=================== Initialize ====================
frec.b
maxpc 21
breakpoint = 500
01(pc: 0): 24040008
02(pc: 4): 241F0003
03(pc: 8): 27BDFFF4
04(pc: C): AFBF0008
05(pc:10): AFA40004
06(pc:14):   804821
07(pc:18): 240A0001
08(pc:1C):  144402A
09(pc:20): 10080009
10(pc:24): 2484FFFF
11(pc:28):  C000003
12(pc:2C): AFA20000
13(pc:30): 8FA40004
14(pc:34): 2484FFFE
15(pc:38):  C000003
16(pc:3C): 8FA90000
17(pc:40):  1224821
18(pc:44): 8FBF0008
19(pc:48): 27BD000C
20(pc:4C):  1201021
21(pc:50):     F808

======================= next ======================
[op-count: 0000,pc: 0x00000000, line: 1, instruction: 24040008]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   8] => [$ 4: 0x 8]
$a0=0x8      

======================= next ======================
[op-count: 0001,pc: 0x00000004, line: 2, instruction: 241f0003]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   3] => [$31: 0x 3]
$a0=0x8      $ra=0x3     

======================= next ======================
[op-count: 0002,pc: 0x00000008, line: 3, instruction: 27bdfff4]
	ADDIU :	[$29: 0x 0] + [im: 0xFFF4] => [$29: 0x7FFF4]
$a0=0x8      $sp=0x7FFF4  $ra=0x3     

======================= next ======================
[op-count: 0003,pc: 0x0000000c, line: 4, instruction: afbf0008]
(im:0x8)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFFC] <- [$31(rs): 0x 3]
		memory[0x7FFFC] = 7FFF4
$a0=0x8      $sp=0x7FFF4  $ra=0x3     

======================= next ======================
[op-count: 0004,pc: 0x00000010, line: 5, instruction: afa40004]
(im:0x4)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFF8] <- [$ 4(rs): 0x 8]
		memory[0x7FFF8] = 7FFF4
$a0=0x8      $sp=0x7FFF4  $ra=0x3     

======================= next ======================
[op-count: 0005,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 8] + [$ 0: 0x 0] => [$ 9: 0x 8]
$a0=0x8      $t1=0x8      $sp=0x7FFF4  $ra=0x3     

======================= next ======================
[op-count: 0006,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x8      $t1=0x8      $t2=0x1      
$sp=0x7FFF4  $ra=0x3     

======================= next ======================
[op-count: 0007,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2A]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0008]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x8      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0x7FFF4  $ra=0x3     

======================= next ======================
[op-count: 0008,pc: 0x00000020, line: 9, instruction: 10080009]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> branch(from 0x0020 to 0x0048)
	<FALSE & NOP>
$a0=0x8      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0x7FFF4  $ra=0x3     

======================= next ======================
[op-count: 0009,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 8] + [im: 0xFFFF] => [$ 4: 0x 7]
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0x7FFF4  $ra=0x3     

======================= next ======================
[op-count: 0010,pc: 0x00000028, line: 11, instruction: 0c000003]
	JAL 
	(jump_to) 0x000c
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0011,pc: 0x0000000c, line: 4, instruction: afbf0008]
(im:0x8)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFFC] <- [$31(rs): 0x2C]
		memory[0x7FFFC] = 7FFF4
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0012,pc: 0x00000010, line: 5, instruction: afa40004]
(im:0x4)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFF8] <- [$ 4(rs): 0x 7]
		memory[0x7FFF8] = 7FFF4
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0013,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 7] + [$ 0: 0x 0] => [$ 9: 0x 7]
$a0=0x7      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0014,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x7      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0015,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2A]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0007]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x7      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0016,pc: 0x00000020, line: 9, instruction: 10080009]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> branch(from 0x0020 to 0x0048)
	<FALSE & NOP>
$a0=0x7      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0017,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 7] + [im: 0xFFFF] => [$ 4: 0x 6]
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0018,pc: 0x00000028, line: 11, instruction: 0c000003]
	JAL 
	(jump_to) 0x000c
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0019,pc: 0x0000000c, line: 4, instruction: afbf0008]
(im:0x8)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFFC] <- [$31(rs): 0x2C]
		memory[0x7FFFC] = 7FFF4
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0020,pc: 0x00000010, line: 5, instruction: afa40004]
(im:0x4)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFF8] <- [$ 4(rs): 0x 6]
		memory[0x7FFF8] = 7FFF4
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0021,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 6] + [$ 0: 0x 0] => [$ 9: 0x 6]
$a0=0x6      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0022,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x6      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0023,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2A]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0006]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x6      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0024,pc: 0x00000020, line: 9, instruction: 10080009]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> branch(from 0x0020 to 0x0048)
	<FALSE & NOP>
$a0=0x6      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0025,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 6] + [im: 0xFFFF] => [$ 4: 0x 5]
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0026,pc: 0x00000028, line: 11, instruction: 0c000003]
	JAL 
	(jump_to) 0x000c
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0027,pc: 0x0000000c, line: 4, instruction: afbf0008]
(im:0x8)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFFC] <- [$31(rs): 0x2C]
		memory[0x7FFFC] = 7FFF4
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0028,pc: 0x00000010, line: 5, instruction: afa40004]
(im:0x4)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFF8] <- [$ 4(rs): 0x 5]
		memory[0x7FFF8] = 7FFF4
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0029,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 5] + [$ 0: 0x 0] => [$ 9: 0x 5]
$a0=0x5      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0030,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x5      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0031,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2A]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0005]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x5      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0032,pc: 0x00000020, line: 9, instruction: 10080009]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> branch(from 0x0020 to 0x0048)
	<FALSE & NOP>
$a0=0x5      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0033,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 5] + [im: 0xFFFF] => [$ 4: 0x 4]
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0034,pc: 0x00000028, line: 11, instruction: 0c000003]
	JAL 
	(jump_to) 0x000c
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0035,pc: 0x0000000c, line: 4, instruction: afbf0008]
(im:0x8)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFFC] <- [$31(rs): 0x2C]
		memory[0x7FFFC] = 7FFF4
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0036,pc: 0x00000010, line: 5, instruction: afa40004]
(im:0x4)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFF8] <- [$ 4(rs): 0x 4]
		memory[0x7FFF8] = 7FFF4
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0037,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 4] + [$ 0: 0x 0] => [$ 9: 0x 4]
$a0=0x4      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0038,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x4      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0039,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2A]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0004]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x4      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0040,pc: 0x00000020, line: 9, instruction: 10080009]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> branch(from 0x0020 to 0x0048)
	<FALSE & NOP>
$a0=0x4      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0041,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 4] + [im: 0xFFFF] => [$ 4: 0x 3]
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0042,pc: 0x00000028, line: 11, instruction: 0c000003]
	JAL 
	(jump_to) 0x000c
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0043,pc: 0x0000000c, line: 4, instruction: afbf0008]
(im:0x8)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFFC] <- [$31(rs): 0x2C]
		memory[0x7FFFC] = 7FFF4
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0044,pc: 0x00000010, line: 5, instruction: afa40004]
(im:0x4)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFF8] <- [$ 4(rs): 0x 3]
		memory[0x7FFF8] = 7FFF4
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0045,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 3] + [$ 0: 0x 0] => [$ 9: 0x 3]
$a0=0x3      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0046,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x3      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0047,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2A]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0003]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x3      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0048,pc: 0x00000020, line: 9, instruction: 10080009]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> branch(from 0x0020 to 0x0048)
	<FALSE & NOP>
$a0=0x3      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0049,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 3] + [im: 0xFFFF] => [$ 4: 0x 2]
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0050,pc: 0x00000028, line: 11, instruction: 0c000003]
	JAL 
	(jump_to) 0x000c
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0051,pc: 0x0000000c, line: 4, instruction: afbf0008]
(im:0x8)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFFC] <- [$31(rs): 0x2C]
		memory[0x7FFFC] = 7FFF4
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0052,pc: 0x00000010, line: 5, instruction: afa40004]
(im:0x4)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFF8] <- [$ 4(rs): 0x 2]
		memory[0x7FFF8] = 7FFF4
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0053,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 2] + [$ 0: 0x 0] => [$ 9: 0x 2]
$a0=0x2      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0054,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x2      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0055,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2A]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0002]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x2      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0056,pc: 0x00000020, line: 9, instruction: 10080009]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> branch(from 0x0020 to 0x0048)
	<FALSE & NOP>
$a0=0x2      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0057,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 2] + [im: 0xFFFF] => [$ 4: 0x 1]
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0058,pc: 0x00000028, line: 11, instruction: 0c000003]
	JAL 
	(jump_to) 0x000c
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0059,pc: 0x0000000c, line: 4, instruction: afbf0008]
(im:0x8)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFFC] <- [$31(rs): 0x2C]
		memory[0x7FFFC] = 7FFF4
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0060,pc: 0x00000010, line: 5, instruction: afa40004]
(im:0x4)/(reg[rs]:0x7FFF4)	SW :	[address: 0x7FFF8] <- [$ 4(rs): 0x 1]
		memory[0x7FFF8] = 7FFF4
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0061,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 1] + [$ 0: 0x 0] => [$ 9: 0x 1]
$a0=0x1      $t0=0x1      $t1=0x1      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0062,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x1      $t0=0x1      $t1=0x1      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0063,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2A]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0001]) 	=> [$ 8: 0x   0] <FALSE>
$a0=0x1      $t1=0x1      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0064,pc: 0x00000020, line: 9, instruction: 10080009]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 0]) -> branch(from 0x0020 to 0x0048)
		<TRUE & JUMP> -> (branch_to) 0x0048
$a0=0x1      $t1=0x1      $t2=0x1      
$sp=0x7FFF4  $ra=0x2C    

======================= next ======================
[op-count: 0065,pc: 0x00000048, line: 19, instruction: 27bd000c]
	ADDIU :	[$29: 0x7FFF4] + [im: 0x   C] => [$29: 0x 0]
$a0=0x1      $t1=0x1      $t2=0x1      
$ra=0x2C    

======================= next ======================
[op-count: 0066,pc: 0x0000004c, line: 20, instruction: 01201021]
	[function:21]
	ADDU :	[$ 9: 0x 1] + [$ 0: 0x 0] => [$ 2: 0x 1]
$v0=0x1      $a0=0x1      $t1=0x1      $t2=0x1      
$ra=0x2C    

======================= next ======================
[op-count: 0067,pc: 0x00000050, line: 21, instruction: 0000f808]
	[function: 8]
	JR : $ra = 0x2C / pc -> 0x2C
$v0=0x1      $a0=0x1      $t1=0x1      $t2=0x1      
$ra=0x2C    

======================= next ======================
[op-count: 0068,pc: 0x0000002c, line: 12, instruction: afa20000]
(im:0x0)/(reg[rs]:0x0)	SW :	[address: 0x 0] <- [$ 2(rs): 0x 1]
		memory[0x   0] = 0
$v0=0x1      $a0=0x1      $t1=0x1      $t2=0x1      
$ra=0x2C    

======================= next ======================
[op-count: 0069,pc: 0x00000030, line: 13, instruction: 8fa40004]
	LW :	[$29 0x 0], memory[address:0x   4]=0xAFA40004 
		reg[rt] = 1
$v0=0x1      $a0=0x1      $t1=0x1      $t2=0x1      
$sp=0xAFA40004 $ra=0x2C    

======================= next ======================
[op-count: 0070,pc: 0x00000034, line: 14, instruction: 2484fffe]
	ADDIU :	[$ 4: 0x 1] + [im: 0xFFFE] => [$ 4: 0xFFFFFFFF]
$v0=0x1      $a0=0xFFFFFFFF $t1=0x1      $t2=0x1      
$sp=0xAFA40004 $ra=0x2C    

======================= next ======================
[op-count: 0071,pc: 0x00000038, line: 15, instruction: 0c000003]
	JAL 
	(jump_to) 0x000c
$v0=0x1      $a0=0xFFFFFFFF $t1=0x1      $t2=0x1      
$sp=0xAFA40004 $ra=0x3C    

======================= next ======================
[op-count: 0072,pc: 0x0000000c, line: 4, instruction: afbf0008]
(im:0x8)/(reg[rs]:0xAFA40004)	SW :	[address: 0xAFA4000C] <- [$31(rs): 0x3C]
[] Memory overflow
