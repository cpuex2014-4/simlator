		addiu	$a0, $a0, 5			$a0に5を代入	001001 00100 00000 0000000000001000
		addiu	$ra, $ra, 3			$raに3を代入	00100100000111110000000000000011
fib:	addiu	$sp, $sp, -12		スタックポインタを12減らす
		sw		$ra, 8($sp)			メモリの(スタックポインタ+8)の位置に呼び出し元関数の戻りアドレスを保存する
		sw		$a0, 4($sp)			メモリの(スタックポインタ+4)の位置に$a0(関数の引数)の内容を保存する
		addu	$t1, $a0, $zero		$t1に$a0を代入する
		addiu	$t2, $zero, 1		$t2に1を代入
		slt		$t0, $t2, $a0		$t2と$a0を比較し、$t2の方が小さければ$t0に1を代入
		beq		$t0, $zero, exit	$t0が0なら EXIT(0x48) に飛ぶ
		addiu	$a0, $a0, -1		$a0=$a0-1
		jal		fib					fibを呼ぶ
		sw		$v0, 0($sp)			メモリの(スタックポインタ)の位置に$v0の内容を保存する
		lw		$a0, 4($sp)			メモリの(スタックポインタ+4)の位置から読み出し、内容を$a0に格納する
		addiu	$a0, $a0, -2		$a0=$a0-2
		jal		fib					fibを呼ぶ
		lw		$t1, 0($sp)			メモリの(スタックポインタ)の位置から読み出し、内容を$t1に格納する
		addu	$t1, $t1, $v0		$t1=$t1+$v0
		lw		$ra, 8($sp)			メモリの(スタックポインタ+8)の位置から読み出し、内容を$raに格納する
exit: 	addiu		$sp, $sp, 12		スタックポインタを12増やす
		addu	$v0, $t1, $zero		$v0=$t1+0
		jr		$ra					$raの値に飛ぶ

$a0 関数呼び出し時の引数(n)
$t1 
$a0 各関数の引数


01(pc:  0): 24040008 00100100000001000000000000001000
02(pc:  4): 241f0003 00100100000111110000000000000011
03(pc:  8): 27bdfff4 00100111101111011111111111110100
04(pc:  c): afbf0008 10101111101111110000000000001000
05(pc: 10): afa40004 10101111101001000000000000000100
06(pc: 14):   804821 00000000100000000100100000100001
07(pc: 18): 240a0001 00100100000010100000000000000001
08(pc: 1c):  144402a 
09(pc: 20): 10080009 
10(pc: 24): 2484ffff 
11(pc: 28):  c000003 
12(pc: 2c): afa20000 
13(pc: 30): 8fa40004 
14(pc: 34): 2484fffe 
15(pc: 38):  c000000 
16(pc: 3c): 8fa90000 
17(pc: 40):  1224821 
18(pc: 44): 8fbf0008 
19(pc: 48): 27bd000c 
20(pc: 4c):  1201021 
21(pc: 50):     f808 

