
=================== Initialize ====================
frec.b
maxpc 21
breakpoint = 100
 1: 24040008
 2: 241f0003
 3: 27bdfff4
 4: afbf0008
 5: afa40004
 6:   804821
 7: 240a0001
 8:  144402a
 9: 10080011
10: 2484ffff
11:  c000001
12: afa20000
13: 8fa40004
14: 2484fffe
15:  c000000
16: 8fa90000
17:  1224821
18: 8fbf0008
19: 27bd000c
20:  1201021
21:     f808

======================= next ======================
[op-count: 0000,pc: 0x00000000, line: 1, instruction: 24040008]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   8] => [$ 4: 0x 8]
$a0=0x8      

	(訳)$a0に8を代入

======================= next ======================
[op-count: 0001,pc: 0x00000004, line: 2, instruction: 241f0003]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   3] => [$31: 0x 3]
$a0=0x8      $ra=0x3     

	(訳)$raに3を代入

======================= next ======================
[op-count: 0002,pc: 0x00000008, line: 3, instruction: 27bdfff4]
	ADDIU :	[$29: 0x 0] + [im: 0xfff4] => [$29: 0xfffffff4]
$a0=0x8      $sp=0xfffffff4 $ra=0x3     

	(訳)$spを12減算

======================= next ======================
[op-count: 0003,pc: 0x0000000c, line: 4, instruction: afbf0008]
	SW :	[address: 0x7fffc] <- [$31(rs): 0x 3]
		memory[0x7fffc] = fffffff4
$a0=0x8      $sp=0xfffffff4 $ra=0x3     

	(訳)memory[0x7fffc]に$spの中身を保存

======================= next ======================
[op-count: 0004,pc: 0x00000010, line: 5, instruction: afa40004]
	SW :	[address: 0x7fff8] <- [$ 4(rs): 0x 8]
		memory[0x7fff8] = fffffff4
$a0=0x8      $sp=0xfffffff4 $ra=0x3     

	(訳)memory[0x7fffc]に$spの中身を保存

======================= next ======================
[op-count: 0005,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 8] + [$ 0: 0x 0] => [$ 9: 0x 8]
$a0=0x8      $t1=0x8      $sp=0xfffffff4 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0006,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x8      $t1=0x8      $t2=0x1      
$sp=0xfffffff4 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0007,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2a]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0008]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x8      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0xfffffff4 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0008,pc: 0x00000020, line: 9, instruction: 10080011]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> jump(0x0011)
	<FALSE & NOP>
$a0=0x8      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0xfffffff4 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0009,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 8] + [im: 0xffff] => [$ 4: 0x 7]
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0xfffffff4 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0010,pc: 0x00000028, line: 11, instruction: 0c000001]
	JAL 
	(jump_to) 0x   1
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0xfffffff4 $ra=0x2c    

	(訳)

======================= next ======================
[op-count: 0011,pc: 0x00000004, line: 2, instruction: 241f0003]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   3] => [$31: 0x 3]
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0xfffffff4 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0012,pc: 0x00000008, line: 3, instruction: 27bdfff4]
	ADDIU :	[$29: 0xfffffff4] + [im: 0xfff4] => [$29: 0xffffffe8]
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0xffffffe8 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0013,pc: 0x0000000c, line: 4, instruction: afbf0008]
	SW :	[address: 0x7fff0] <- [$31(rs): 0x 3]
		memory[0x7fff0] = ffffffe8
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0xffffffe8 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0014,pc: 0x00000010, line: 5, instruction: afa40004]
	SW :	[address: 0x7ffec] <- [$ 4(rs): 0x 7]
		memory[0x7ffec] = ffffffe8
$a0=0x7      $t0=0x1      $t1=0x8      $t2=0x1      
$sp=0xffffffe8 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0015,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 7] + [$ 0: 0x 0] => [$ 9: 0x 7]
$a0=0x7      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffe8 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0016,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x7      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffe8 $ra=0x3     

	(訳)

======================= next ======================
[op-count: 0017,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2a]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0007]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x7      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffe8 $ra=0x3     

======================= next ======================
[op-count: 0018,pc: 0x00000020, line: 9, instruction: 10080011]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> jump(0x0011)
	<FALSE & NOP>
$a0=0x7      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffe8 $ra=0x3     

======================= next ======================
[op-count: 0019,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 7] + [im: 0xffff] => [$ 4: 0x 6]
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffe8 $ra=0x3     

======================= next ======================
[op-count: 0020,pc: 0x00000028, line: 11, instruction: 0c000001]
	JAL 
	(jump_to) 0x   1
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffe8 $ra=0x2c    

======================= next ======================
[op-count: 0021,pc: 0x00000004, line: 2, instruction: 241f0003]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   3] => [$31: 0x 3]
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffe8 $ra=0x3     

======================= next ======================
[op-count: 0022,pc: 0x00000008, line: 3, instruction: 27bdfff4]
	ADDIU :	[$29: 0xffffffe8] + [im: 0xfff4] => [$29: 0xffffffdc]
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffdc $ra=0x3     

======================= next ======================
[op-count: 0023,pc: 0x0000000c, line: 4, instruction: afbf0008]
	SW :	[address: 0x7ffe4] <- [$31(rs): 0x 3]
		memory[0x7ffe4] = ffffffdc
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffdc $ra=0x3     

======================= next ======================
[op-count: 0024,pc: 0x00000010, line: 5, instruction: afa40004]
	SW :	[address: 0x7ffe0] <- [$ 4(rs): 0x 6]
		memory[0x7ffe0] = ffffffdc
$a0=0x6      $t0=0x1      $t1=0x7      $t2=0x1      
$sp=0xffffffdc $ra=0x3     

======================= next ======================
[op-count: 0025,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 6] + [$ 0: 0x 0] => [$ 9: 0x 6]
$a0=0x6      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffdc $ra=0x3     

======================= next ======================
[op-count: 0026,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x6      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffdc $ra=0x3     

======================= next ======================
[op-count: 0027,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2a]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0006]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x6      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffdc $ra=0x3     

======================= next ======================
[op-count: 0028,pc: 0x00000020, line: 9, instruction: 10080011]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> jump(0x0011)
	<FALSE & NOP>
$a0=0x6      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffdc $ra=0x3     

======================= next ======================
[op-count: 0029,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 6] + [im: 0xffff] => [$ 4: 0x 5]
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffdc $ra=0x3     

======================= next ======================
[op-count: 0030,pc: 0x00000028, line: 11, instruction: 0c000001]
	JAL 
	(jump_to) 0x   1
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffdc $ra=0x2c    

======================= next ======================
[op-count: 0031,pc: 0x00000004, line: 2, instruction: 241f0003]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   3] => [$31: 0x 3]
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffdc $ra=0x3     

======================= next ======================
[op-count: 0032,pc: 0x00000008, line: 3, instruction: 27bdfff4]
	ADDIU :	[$29: 0xffffffdc] + [im: 0xfff4] => [$29: 0xffffffd0]
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffd0 $ra=0x3     

======================= next ======================
[op-count: 0033,pc: 0x0000000c, line: 4, instruction: afbf0008]
	SW :	[address: 0x7ffd8] <- [$31(rs): 0x 3]
		memory[0x7ffd8] = ffffffd0
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffd0 $ra=0x3     

======================= next ======================
[op-count: 0034,pc: 0x00000010, line: 5, instruction: afa40004]
	SW :	[address: 0x7ffd4] <- [$ 4(rs): 0x 5]
		memory[0x7ffd4] = ffffffd0
$a0=0x5      $t0=0x1      $t1=0x6      $t2=0x1      
$sp=0xffffffd0 $ra=0x3     

======================= next ======================
[op-count: 0035,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 5] + [$ 0: 0x 0] => [$ 9: 0x 5]
$a0=0x5      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffd0 $ra=0x3     

======================= next ======================
[op-count: 0036,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x5      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffd0 $ra=0x3     

======================= next ======================
[op-count: 0037,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2a]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0005]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x5      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffd0 $ra=0x3     

======================= next ======================
[op-count: 0038,pc: 0x00000020, line: 9, instruction: 10080011]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> jump(0x0011)
	<FALSE & NOP>
$a0=0x5      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffd0 $ra=0x3     

======================= next ======================
[op-count: 0039,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 5] + [im: 0xffff] => [$ 4: 0x 4]
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffd0 $ra=0x3     

======================= next ======================
[op-count: 0040,pc: 0x00000028, line: 11, instruction: 0c000001]
	JAL 
	(jump_to) 0x   1
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffd0 $ra=0x2c    

======================= next ======================
[op-count: 0041,pc: 0x00000004, line: 2, instruction: 241f0003]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   3] => [$31: 0x 3]
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffd0 $ra=0x3     

======================= next ======================
[op-count: 0042,pc: 0x00000008, line: 3, instruction: 27bdfff4]
	ADDIU :	[$29: 0xffffffd0] + [im: 0xfff4] => [$29: 0xffffffc4]
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffc4 $ra=0x3     

======================= next ======================
[op-count: 0043,pc: 0x0000000c, line: 4, instruction: afbf0008]
	SW :	[address: 0x7ffcc] <- [$31(rs): 0x 3]
		memory[0x7ffcc] = ffffffc4
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffc4 $ra=0x3     

======================= next ======================
[op-count: 0044,pc: 0x00000010, line: 5, instruction: afa40004]
	SW :	[address: 0x7ffc8] <- [$ 4(rs): 0x 4]
		memory[0x7ffc8] = ffffffc4
$a0=0x4      $t0=0x1      $t1=0x5      $t2=0x1      
$sp=0xffffffc4 $ra=0x3     

======================= next ======================
[op-count: 0045,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 4] + [$ 0: 0x 0] => [$ 9: 0x 4]
$a0=0x4      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffc4 $ra=0x3     

======================= next ======================
[op-count: 0046,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x4      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffc4 $ra=0x3     

======================= next ======================
[op-count: 0047,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2a]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0004]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x4      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffc4 $ra=0x3     

======================= next ======================
[op-count: 0048,pc: 0x00000020, line: 9, instruction: 10080011]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> jump(0x0011)
	<FALSE & NOP>
$a0=0x4      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffc4 $ra=0x3     

======================= next ======================
[op-count: 0049,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 4] + [im: 0xffff] => [$ 4: 0x 3]
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffc4 $ra=0x3     

======================= next ======================
[op-count: 0050,pc: 0x00000028, line: 11, instruction: 0c000001]
	JAL 
	(jump_to) 0x   1
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffc4 $ra=0x2c    

======================= next ======================
[op-count: 0051,pc: 0x00000004, line: 2, instruction: 241f0003]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   3] => [$31: 0x 3]
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffc4 $ra=0x3     

======================= next ======================
[op-count: 0052,pc: 0x00000008, line: 3, instruction: 27bdfff4]
	ADDIU :	[$29: 0xffffffc4] + [im: 0xfff4] => [$29: 0xffffffb8]
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffb8 $ra=0x3     

======================= next ======================
[op-count: 0053,pc: 0x0000000c, line: 4, instruction: afbf0008]
	SW :	[address: 0x7ffc0] <- [$31(rs): 0x 3]
		memory[0x7ffc0] = ffffffb8
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffb8 $ra=0x3     

======================= next ======================
[op-count: 0054,pc: 0x00000010, line: 5, instruction: afa40004]
	SW :	[address: 0x7ffbc] <- [$ 4(rs): 0x 3]
		memory[0x7ffbc] = ffffffb8
$a0=0x3      $t0=0x1      $t1=0x4      $t2=0x1      
$sp=0xffffffb8 $ra=0x3     

======================= next ======================
[op-count: 0055,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 3] + [$ 0: 0x 0] => [$ 9: 0x 3]
$a0=0x3      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffb8 $ra=0x3     

======================= next ======================
[op-count: 0056,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x3      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffb8 $ra=0x3     

======================= next ======================
[op-count: 0057,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2a]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0003]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x3      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffb8 $ra=0x3     

======================= next ======================
[op-count: 0058,pc: 0x00000020, line: 9, instruction: 10080011]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> jump(0x0011)
	<FALSE & NOP>
$a0=0x3      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffb8 $ra=0x3     

======================= next ======================
[op-count: 0059,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 3] + [im: 0xffff] => [$ 4: 0x 2]
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffb8 $ra=0x3     

======================= next ======================
[op-count: 0060,pc: 0x00000028, line: 11, instruction: 0c000001]
	JAL 
	(jump_to) 0x   1
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffb8 $ra=0x2c    

======================= next ======================
[op-count: 0061,pc: 0x00000004, line: 2, instruction: 241f0003]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   3] => [$31: 0x 3]
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffb8 $ra=0x3     

======================= next ======================
[op-count: 0062,pc: 0x00000008, line: 3, instruction: 27bdfff4]
	ADDIU :	[$29: 0xffffffb8] + [im: 0xfff4] => [$29: 0xffffffac]
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffac $ra=0x3     

======================= next ======================
[op-count: 0063,pc: 0x0000000c, line: 4, instruction: afbf0008]
	SW :	[address: 0x7ffb4] <- [$31(rs): 0x 3]
		memory[0x7ffb4] = ffffffac
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffac $ra=0x3     

======================= next ======================
[op-count: 0064,pc: 0x00000010, line: 5, instruction: afa40004]
	SW :	[address: 0x7ffb0] <- [$ 4(rs): 0x 2]
		memory[0x7ffb0] = ffffffac
$a0=0x2      $t0=0x1      $t1=0x3      $t2=0x1      
$sp=0xffffffac $ra=0x3     

======================= next ======================
[op-count: 0065,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 2] + [$ 0: 0x 0] => [$ 9: 0x 2]
$a0=0x2      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffac $ra=0x3     

======================= next ======================
[op-count: 0066,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x2      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffac $ra=0x3     

======================= next ======================
[op-count: 0067,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2a]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0002]) 	=> [$ 8: 0x   1] <TRUE>
$a0=0x2      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffac $ra=0x3     

======================= next ======================
[op-count: 0068,pc: 0x00000020, line: 9, instruction: 10080011]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 1]) -> jump(0x0011)
	<FALSE & NOP>
$a0=0x2      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffac $ra=0x3     

======================= next ======================
[op-count: 0069,pc: 0x00000024, line: 10, instruction: 2484ffff]
	ADDIU :	[$ 4: 0x 2] + [im: 0xffff] => [$ 4: 0x 1]
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffac $ra=0x3     

======================= next ======================
[op-count: 0070,pc: 0x00000028, line: 11, instruction: 0c000001]
	JAL 
	(jump_to) 0x   1
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffac $ra=0x2c    

======================= next ======================
[op-count: 0071,pc: 0x00000004, line: 2, instruction: 241f0003]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   3] => [$31: 0x 3]
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffac $ra=0x3     

======================= next ======================
[op-count: 0072,pc: 0x00000008, line: 3, instruction: 27bdfff4]
	ADDIU :	[$29: 0xffffffac] + [im: 0xfff4] => [$29: 0xffffffa0]
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffa0 $ra=0x3     

======================= next ======================
[op-count: 0073,pc: 0x0000000c, line: 4, instruction: afbf0008]
	SW :	[address: 0x7ffa8] <- [$31(rs): 0x 3]
		memory[0x7ffa8] = ffffffa0
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffa0 $ra=0x3     

======================= next ======================
[op-count: 0074,pc: 0x00000010, line: 5, instruction: afa40004]
	SW :	[address: 0x7ffa4] <- [$ 4(rs): 0x 1]
		memory[0x7ffa4] = ffffffa0
$a0=0x1      $t0=0x1      $t1=0x2      $t2=0x1      
$sp=0xffffffa0 $ra=0x3     

======================= next ======================
[op-count: 0075,pc: 0x00000014, line: 6, instruction: 00804821]
	[function:21]
	ADDU :	[$ 4: 0x 1] + [$ 0: 0x 0] => [$ 9: 0x 1]
$a0=0x1      $t0=0x1      $t1=0x1      $t2=0x1      
$sp=0xffffffa0 $ra=0x3     

======================= next ======================
[op-count: 0076,pc: 0x00000018, line: 7, instruction: 240a0001]
	ADDIU :	[$ 0: 0x 0] + [im: 0x   1] => [$10: 0x 1]
$a0=0x1      $t0=0x1      $t1=0x1      $t2=0x1      
$sp=0xffffffa0 $ra=0x3     

======================= next ======================
[op-count: 0077,pc: 0x0000001c, line: 8, instruction: 0144402a]
	[function:2a]
	SLT :	?([$10: 0x0001] < [$ 4: 0x0001]) 	=> [$ 8: 0x   0] <FALSE>
$a0=0x1      $t1=0x1      $t2=0x1      
$sp=0xffffffa0 $ra=0x3     

======================= next ======================
[op-count: 0078,pc: 0x00000020, line: 9, instruction: 10080011]
	BEQ :	?([$ 0 0x 0]=[$ 8 0x 0]) -> jump(0x0011)
		<TRUE & JUMP> -> (jump_to) 0x0011
$a0=0x1      $t1=0x1      $t2=0x1      
$sp=0xffffffa0 $ra=0x3     

======================= next ======================
[op-count: 0079,pc: 0x00000068, line: 27, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0080,pc: 0x0000006c, line: 28, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0081,pc: 0x00000070, line: 29, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0082,pc: 0x00000074, line: 30, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0083,pc: 0x00000078, line: 31, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0084,pc: 0x0000007c, line: 32, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0085,pc: 0x00000080, line: 33, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0086,pc: 0x00000084, line: 34, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0087,pc: 0x00000088, line: 35, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0088,pc: 0x0000008c, line: 36, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0089,pc: 0x00000090, line: 37, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0090,pc: 0x00000094, line: 38, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0091,pc: 0x00000098, line: 39, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0092,pc: 0x0000009c, line: 40, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0093,pc: 0x000000a0, line: 41, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0094,pc: 0x000000a4, line: 42, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0095,pc: 0x000000a8, line: 43, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0096,pc: 0x000000ac, line: 44, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0097,pc: 0x000000b0, line: 45, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0098,pc: 0x000000b4, line: 46, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0099,pc: 0x000000b8, line: 47, instruction: 00000000]
	[function: 0]
	NOP

======================= next ======================
[op-count: 0100,pc: 0x000000bc, line: 48, instruction: 00000000]
	[function: 0]
	NOP

[ FINISHED ]

メモリダンプ
memory[   0] = 24040008
memory[   1] = 241f0003
memory[   2] = 27bdfff4
memory[   3] = afbf0008
memory[   4] = afa40004
memory[   5] =   804821
memory[   6] = 240a0001
memory[   7] =  144402a
memory[   8] = 10080011
memory[   9] = 2484ffff
memory[   a] =  c000001
memory[   b] = afa20000
memory[   c] = 8fa40004
memory[   d] = 2484fffe
memory[   e] =  c000000
memory[   f] = 8fa90000
memory[  10] =  1224821
memory[  11] = 8fbf0008
memory[  12] = 27bd000c
memory[  13] =  1201021
memory[  14] =     f808
memory[7ffa4] = ffffffa0
memory[7ffa8] = ffffffa0
memory[7ffb0] = ffffffac
memory[7ffb4] = ffffffac
memory[7ffbc] = ffffffb8
memory[7ffc0] = ffffffb8
memory[7ffc8] = ffffffc4
memory[7ffcc] = ffffffc4
memory[7ffd4] = ffffffd0
memory[7ffd8] = ffffffd0
memory[7ffe0] = ffffffdc
memory[7ffe4] = ffffffdc
memory[7ffec] = ffffffe8
memory[7fff0] = ffffffe8
memory[7fff8] = fffffff4
memory[7fffc] = fffffff4


Total instructions: 101
ADDIU :     32, 31.68 (%)
LW    :      0, 0.00 (%)
SW    :     16, 15.84 (%)
JUMP  :      0, 0.00 (%)
JAL   :      7, 6.93 (%)
BEQ   :      8, 7.92 (%)
NOP   :     22, 21.78 (%)
JR    :      0, 0.00 (%)
SUBU  :      0, 0.00 (%)
AND   :      0, 0.00 (%)
OR    :      0, 0.00 (%)
ADDU  :      8, 7.92 (%)
SLT   :      8, 7.92 (%)
