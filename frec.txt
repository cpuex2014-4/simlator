		addiu	N, N, 5			Nに5を代入	001001 00100 00000 0000000000001000
		addiu	$ra, $ra, 3			$raに3を代入	00100100000111110000000000000011
fib:	addiu	$sp, $sp, -12		スタックポインタを12減らす
		sw		$ra, 8($sp)			メモリの(スタックポインタ+8)の位置に呼び出し元関数の戻りアドレス($ra)を保存する
		sw		N, 4($sp)			メモリの(スタックポインタ+4)の位置にN(関数の引数)の内容を保存する
		addu	$t1, N, 0		$t1にNを代入する
		addiu	<i>, 0, 1		<i>に1を代入
		slt		$t0, <i>, N		<i>とNを比較し、<i>の方が小さければ$t0に1を代入
		beq		$t0, 0, exit	$t0が0なら EXIT に飛ぶ
		addiu	N, N, -1		N=N-1
		jal		fib					fibを呼ぶ
		sw		$v0, 0($sp)			メモリの(スタックポインタ)の位置に$v0の内容を保存する
		lw		N, 4($sp)			メモリの(スタックポインタ+4)の位置から読み出し、内容をNに格納する
		addiu	N, N, -2		N=N-2
		jal		fib					fibを呼ぶ
		lw		$t1, 0($sp)			メモリの(スタックポインタ)の位置から読み出し、内容を$t1に格納する
		addu	$t1, $t1, $v0		$t1=$t1+$v0
		lw		$ra, 8($sp)			メモリの(スタックポインタ+8)の位置から読み出し、内容を$raに格納する
exit: 	addiu		$sp, $sp, 12		スタックポインタを12増やす
		addu	$v0, $t1, 0		$v0=$t1+0
		jr		$ra					$raの値に飛ぶ

N 関数呼び出し時の引数(n)
$t1 
N 各関数の引数




